{"version":3,"sources":["components/Container/Container.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/store.js","index.js"],"names":["Container","className","children","title","defaultProps","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","contact","post","contactId","delete","getFilter","state","contacts","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","name","includes","createReducer","_","action","payload","find","alert","id","loading","combineReducers","ContactForm","number","inputName","event","currentTarget","value","setState","shortId","generate","handleSubmit","preventDefault","defaultValue","props","onSubmit","console","log","reset","this","htmlFor","type","pattern","required","onChange","Component","connect","contactsOperations","ContactList","fetchContacts","onRemove","map","onClick","e","App","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc62004a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Container = ({ className, children, title }) => (\r\n    <div className={className}>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nContainer.defaultProps = {\r\n    children: null,\r\n};\r\n\r\nContainer.propTypes = {\r\n    className: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.any,\r\n};\r\n\r\nexport default Container;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\n//fetch Contacts\r\nexport const fetchContactsRequest = createAction(\r\n    'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n    'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction(\r\n    'contacts/fetchContactsError',\r\n);\r\n\r\n//add Contacts\r\nexport const addContactRequest = createAction(\r\n    'contacts/addContactRequest',\r\n);\r\nexport const addContactSuccess = createAction(\r\n    'contacts/addContactSuccess',\r\n);\r\nexport const addContactError = createAction(\r\n    'contacts/addContactError',\r\n);\r\n\r\n//remove Contacts\r\nexport const removeContactRequest = createAction(\r\n    'contacts/removeContactRequest',\r\n);\r\nexport const removeContactSuccess = createAction(\r\n    'contacts/removeContactSuccess',\r\n);\r\nexport const removeContactError = createAction(\r\n    'contacts/removeContactError',\r\n);\r\n\r\n//change Filter\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n// const addContact = ({ name, number, id }) => ({\r\n//     type: types.ADD,\r\n//     payload: { name, number, id },\r\n// });\r\n// const removeContact = contactId => ({\r\n//     type: types.REMOVE,\r\n//     payload: contactId,\r\n// });\r\n// const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value,\r\n// });\r\n","import axios from 'axios';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    removeContactRequest,\r\n    removeContactSuccess,\r\n    removeContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3050';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n        .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = contact => dispatch => {\r\n    dispatch(addContactRequest());\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst removeContact = contactId => dispatch => {\r\n    dispatch(removeContactRequest());\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(removeContactSuccess(contactId)))\r\n        .catch(error => dispatch(removeContactError(error)));\r\n};\r\n\r\nexport default { fetchContacts, addContact, removeContact };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    },\r\n);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    removeContactRequest,\r\n    removeContactSuccess,\r\n    removeContactError,\r\n    changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (_, action) => action.payload,\r\n    [addContactSuccess]: (state, action) => {\r\n        const nameExistCheck = state.find(\r\n            contact => contact.name === action.payload.name,\r\n        );\r\n        return !nameExistCheck\r\n            ? [...state, action.payload]\r\n            : alert('This name has already exists, try another one!');\r\n    },\r\n\r\n    [removeContactSuccess]: (state, action) =>\r\n        state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [removeContactRequest]: () => true,\r\n    [removeContactSuccess]: () => false,\r\n    [removeContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload];\r\n\r\n//         case types.REMOVE:\r\n//             return state.filter(contact => contact.id !== payload);\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n// const filter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.CHANGE_FILTER:\r\n//             return payload;\r\n\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport shortId from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport { contactsOperations } from '../../redux/contacts';\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n    };\r\n    state = {\r\n        name: '',\r\n        id: '',\r\n        number: '',\r\n    };\r\n    inputName = event => {\r\n        const { value, name } = event.currentTarget;\r\n        this.setState({\r\n            [name]: value,\r\n            id: shortId.generate(),\r\n        });\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const nameValue = event.currentTarget[0].defaultValue;\r\n        this.props.onSubmit(this.state);\r\n        console.log(this.state);\r\n        this.reset();\r\n    };\r\n    reset = () => {\r\n        this.setState({ name: '', id: '', number: '' });\r\n    };\r\n    render() {\r\n        const { handleSubmit, inputName } = this;\r\n        const { id, name, number } = this.state;\r\n        return (\r\n            <>\r\n                <form onSubmit={handleSubmit}>\r\n                    <label htmlFor={id} className=\"label name\">\r\n                        Name\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id={id}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов.\"\r\n                        required\r\n                        onChange={inputName}\r\n                        value={name}\r\n                    />\r\n                    <label htmlFor={id} className=\"label number\">\r\n                        Number\r\n                    </label>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        id={id}\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        onChange={inputName}\r\n                        value={number}\r\n                    />\r\n                    <button type=\"submit\">Add contact</button>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSubmit: data =>\r\n            dispatch(contactsOperations.addContact(data)),\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    contactsOperations,\r\n    getVisibleContacts,\r\n} from '../../redux/contacts';\r\n\r\nclass ContactList extends Component {\r\n    static propTypes = {\r\n        contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n        onRemove: PropTypes.func.isRequired,\r\n    };\r\n    componentDidMount() {\r\n        this.props.fetchContacts();\r\n    }\r\n    render() {\r\n        const { onRemove, contacts } = this.props;\r\n        return (\r\n            <>\r\n                <ul className=\"contact-list\">\r\n                    {contacts.map(({ id, name, number }) => (\r\n                        <li key={id} id={id}>\r\n                            <p className=\"text-name\">{name}</p>\r\n                            <p className=\"text-number\">{number}</p>\r\n                            <button\r\n                                className=\"btn-delete\"\r\n                                onClick={() => onRemove(id)}\r\n                            >\r\n                                X\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        contacts: getVisibleContacts(state),\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n    onRemove: id => dispatch(contactsOperations.removeContact(id)),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(ContactList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter, getFilter } from '../../redux/contacts';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <>\r\n        <label htmlFor=\"filter\" className=\"label search\">\r\n            Search Contact\r\n        </label>\r\n        <input\r\n            value={value}\r\n            name=\"filter\"\r\n            onChange={onChange}\r\n            className=\"input\"\r\n        />\r\n    </>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: getFilter(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\n// import initialContacts from './contacts.json';\nimport Container from './components/Container';\nimport ContactForm from './components/ContactForm';\n// import Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport './styles/main.scss';\nimport Filter from './components/Filter/Filter';\n\nconst App = () => {\n    // state = {\n    //     // contacts: initialContacts,\n    //     // filter: '',\n    // };\n    // componentDidUpdate(prebProps, prevState) {\n    //     if (this.state.contacts !== prevState.contacts) {\n    //         localStorage.setItem(\n    //             'contacts',\n    //             JSON.stringify(this.state.contacts),\n    //         );\n    //     }\n    // }\n    // componentDidMount() {\n    //     const contacts = localStorage.getItem('contacts');\n    //     const parsedContacts = JSON.parse(contacts);\n    //     if (parsedContacts) {\n    //         this.setState({ contacts: parsedContacts });\n    //     }\n    // }\n    // addContact = ({ name, id, number }) => {\n    //     const newContact = {\n    //         name,\n    //         id,\n    //         number,\n    //     };\n    //     this.setState(({ contacts }) => ({\n    //         contacts: [newContact, ...contacts],\n    //     }));\n    // };\n    // handleFilter = event => {\n    //     this.setState({ filter: event.currentTarget.value });\n    // };\n    // getSearchingContacts = () => {\n    //     const { contacts, filter } = this.state;\n    //     const normalizedFilter = filter.toLowerCase();\n    //     return contacts.filter(contact =>\n    //         contact.name.toLowerCase().includes(normalizedFilter),\n    //     );\n    // };\n    // getAllNames = () => {\n    //     return this.state.contacts.map(contact => contact.name);\n    // };\n    // removeContact = contactId => {\n    //     this.setState(prevState => ({\n    //         contacts: prevState.contacts.filter(\n    //             contact => contact.id !== contactId,\n    //         ),\n    //     }));\n    // };\n    return (\n        <>\n            <Container className=\"phonebook-cont\" title=\"Phonebook\">\n                <ContactForm />\n            </Container>\n            <Container className=\"contacts-cont\" title=\"Contacts\">\n                <Filter />\n                <ContactList />\n            </Container>\n        </>\n    );\n};\n\nexport default App;\n","import { contactsReducer } from './contacts';\r\nimport {\r\n    configureStore,\r\n    getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [\r\n                FLUSH,\r\n                REHYDRATE,\r\n                PAUSE,\r\n                PERSIST,\r\n                PURGE,\r\n                REGISTER,\r\n            ],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = store;\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}